// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetProject.DataAccess;

namespace PetProject.DataAccess.Migrations
{
    [DbContext(typeof(PetContext))]
    partial class PetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("PetProject.Domain.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PetStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Volunteer")
                        .HasColumnType("TEXT");

                    b.HasKey("PetId");

                    b.HasIndex("PetStatusId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetProject.Domain.PetFeature", b =>
                {
                    b.Property<int>("PetFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Characteristic")
                        .HasColumnType("TEXT");

                    b.HasKey("PetFeatureId");

                    b.ToTable("PetFeatures");
                });

            modelBuilder.Entity("PetProject.Domain.PetFeatureAssignment", b =>
                {
                    b.Property<int>("PetFeatureAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PetFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PetFeatureAssignmentId");

                    b.HasIndex("PetFeatureId");

                    b.HasIndex("PetId");

                    b.ToTable("PetFeatureAssignments");
                });

            modelBuilder.Entity("PetProject.Domain.PetStatus", b =>
                {
                    b.Property<int>("PetStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("PetStatusId");

                    b.ToTable("PetStatuses");
                });

            modelBuilder.Entity("PetProject.Domain.PetTaskAssignment", b =>
                {
                    b.Property<int>("PetTaskAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PetTaskAssignmentId");

                    b.HasIndex("PetId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("PetTaskAssignments");
                });

            modelBuilder.Entity("PetProject.Domain.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PetProject.Domain.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DefaultDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PetPoints")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskTypeId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("PetProject.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlackListed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PetPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PetProject.Domain.UserFeature", b =>
                {
                    b.Property<int>("UserFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("Characteristic")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserFeatureId");

                    b.ToTable("UserFeature");
                });

            modelBuilder.Entity("PetProject.Domain.UserFeatureAssignment", b =>
                {
                    b.Property<int>("UserFeatureAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserFeatureAssignmentId");

                    b.HasIndex("UserFeatureId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeatureAssignments");
                });

            modelBuilder.Entity("PetProject.Domain.Pet", b =>
                {
                    b.HasOne("PetProject.Domain.PetStatus", "PetStatus")
                        .WithMany("Pets")
                        .HasForeignKey("PetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetProject.Domain.PetFeatureAssignment", b =>
                {
                    b.HasOne("PetProject.Domain.PetFeature", "PetFeature")
                        .WithMany("PetFeatureAssignments")
                        .HasForeignKey("PetFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetProject.Domain.Pet", "Pet")
                        .WithMany("PetFeatureAssignments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetProject.Domain.PetTaskAssignment", b =>
                {
                    b.HasOne("PetProject.Domain.Pet", "Pet")
                        .WithMany("PetTaskAssignments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetProject.Domain.TaskType", "TaskType")
                        .WithMany("PetTaskAssignments")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetProject.Domain.Task", b =>
                {
                    b.HasOne("PetProject.Domain.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetProject.Domain.UserFeatureAssignment", b =>
                {
                    b.HasOne("PetProject.Domain.UserFeature", "UserFeature")
                        .WithMany("UserFeatureAssignments")
                        .HasForeignKey("UserFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetProject.Domain.User", "User")
                        .WithMany("UserFeatureAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
